NB. cal.ijt - Wednesday 17 April 2019  01:02:16

LABTITLE=: 'CAL - the TABULA engine'
LABDEPENDS=: 'math/cal numeric plot'

NB. =========================================================

>>>>> Choose (or create) a simpler sample
	Asteroid? --no trig problems then.
>>>>> Show the CAL instruction set - or just a bit of it.


Lab Section INTRO
CAL is the engine which drives TABULA.
It constructs "ttables" (TABULA-tables),
 and saves and reloads them.

CAL is command-driven via a single "keyhole" -
 the verb: tabengine

The instructions of CAL each begin with a 4-byte code
followed by arguments (if needed)

E.g. the instruction to return the version number is 'VERS'
(no arguments)
)
cocurrent 'base'

load 'math/cal'

tt=: tabengine_cal_   NB. handy way to send it instructions

tt 'VERS'   NB. bad version number because not initialized.

NB. =========================================================
Lab Section INTRO2
CAL needs initializing before it responds to instructions...
)

start_cal_ ''

tt 'VERS'

NB. =========================================================
Lab Section DISP1
Once initialized, CAL loads a ttable named: SAMPLE.


>>>>>>>> NO IT DOESN'T
	best not to mention start options till last.



 ++ To display its filename:
      tt 'TNAM'
 ++ To display its caption:
      tt 'TITL'
 ++ To display the currently loaded ttable:
      tt 'CTAB'   NB. result in wide cars
      tt 'CTBU'   NB. result in utf-8 as LF-sep string
)

tt 'TNAM'

tt 'TITL'

$ z=: tt 'CTBU'
z

NB. =========================================================
Lab Section DISP2
CTAB returns a 2D display in unicode wide chars.
But CTBU returns a LF-separated utf-8 string, as needed by
JWD to display in a JWD listview or editm control.
)

(datatype z) ; ($z) ; (LF e. z) ; z=: tt 'CTAB'

(datatype z) ; ($z) ; (LF e. z) ; >cutopen z=: tt 'CTBU'

NB. =========================================================
Lab Section CMD1
All CAL instructions begin with a 4-letter command,
followed by arguments (if the command needs any).

Commands in UPPERCASE are requests for data,
which is returned by: tt...
)

tt 'VERS'   NB. the contents of VERSION_cal_

tt 'ABOU'   NB. the contents of ABOUT_cal_

NB. =========================================================
Lab Section CMD2
Commands in lowercase make changes to the ttable.
For example: newt (new empty ttable) and open.
Since SAMPLE is freely changeable by the user,
let us open an unchanging sample: SAMPLE0 ...
)

tt 'newt'
tt 'open 0'	NB. ditto 'open 1' for SAMPLE1 etc
tt 'CTBU'

NB. =========================================================
Lab Section CMD3
Let us save this loaded ttable as the startup SAMPLE, then
reload the SAMPLE ...
)

tt 'save $$'
tt 'newt'	NB. (just to make sure it's gone)
tt 'open'	NB. no arg means SAMPLE
tt 'CTBU'

NB. =========================================================
Lab Section ITEM1
The most important parameter following the 4-letter command
is the item number.
Let's fetch the main components of item {1} ...

>>>>>>>> NO --use an item with a formula.
)

tt 'NAME 1'	NB. the item's name
tt 'VALU 1'	NB. the item's value
tt 'FMLA 1'	NB. the item's formula

NB. =========================================================
Lab Section ITEM2
Use corresponding lowercase commands to write back the value
etc of item {1} (and notice how other items change) ...
)

NB. tt 'valu 4 1.0'	--forces bbk

tt 'name 1 my new name'
tt 'valu 1 2.5'
tt 'VALU 1'
tt 'CTBU'

NB. =========================================================
Lab Section SAVE
Lastly, save the altered ttable in the user library under
your own choice of name ...
)

tt 'save mytestname'
tt 'TFIL'	NB. full pathname of saved file
